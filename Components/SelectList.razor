@using BlazorEditFormExamples.Model
@inherits InputBase<SelectListItem?>

<select value="@CurrentValueAsString" @onchange="SelectValueChanged" @attributes="@AdditionalAttributes" class="@ClassValue">
    <option value="" selected="@(string.IsNullOrEmpty(CurrentValueAsString))">Select...</option>
    @if (Items != null)
    {
        @foreach (var item in Items)
        {
            <option value="@item.Value" selected="@(item.Value == CurrentValueAsString)">@item.Text</option>
        }
    }
</select>

@code {
    [Parameter]
    public List<SelectListItem>? Items { get; set; }

    private string ClassValue { get; set; } = string.Empty;

    protected override void OnInitialized()
    {
        SetClassValue();
    }

    private void SelectValueChanged(ChangeEventArgs e)
    {
        CurrentValueAsString = e.Value as string;
        SetClassValue();
    }

    private void SetClassValue()
    {
        if (AdditionalAttributes != null)
        {
            ClassValue = AdditionalAttributes["class"]?.ToString() ?? string.Empty;
            ClassValue += " " + EditContext?.FieldCssClass(FieldIdentifier);
        }
    }

    protected override bool TryParseValueFromString(string? value, out SelectListItem? result, out string validationErrorMessage)
    {
        result = null;
        if (Items != null)
        {
            result = Items.FirstOrDefault(x => x.Value == value);
        }

        validationErrorMessage = string.Empty;
        return true;
    }

    protected override string FormatValueAsString(SelectListItem? value)
    {
        return value?.Value ?? string.Empty;
    }

}